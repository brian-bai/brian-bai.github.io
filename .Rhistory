x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)
sum(x^2)
sum(x*y)/sum(x^2)
data(mtcars)
mtcars
weight<-mtcars[,"wt"]
weight
mpg<-mtcars[,"mpg"]
mpg
plot(weight,mpg)
cor(weight,mpg)
fit<-lm(weight~mpg)
fit
fit<-lm(mpg~weight)
fit
?lm
fit<-lm(weight~mpg)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
summary(x)
sd(x)
?sd
8.58-9.31
-0.73/0.75
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
fit<-lm(weight~mpg)
fit
fit<-lm(mpg~weight)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm(w~x)
z<c(0.0025,0.3,0.1471,1.077)
z<-c(0.0025,0.3,0.1471,1.077)
z
x-0.3
sum(w*(x-0.3)^2)
sum(w*(x-0.0025)^2)
sum(w*(x-0.1471)^2)
sum(w*(x-1.077)^2)
swirl()
library(swirl)
swirl()
quit()
license()
library()
mean(1:1337)
d <- c(1:10, 30:40, 5, 7, 9, 12)
median(d)
sum(d)
rep(letters[1:5],3)
sample(LETTERS,5,replace=T)
sample(LETTERS,5,replace=T)
sample(LETTERS,50,replace=T)
sample(LETTERS,50,replace=F)
is.vector(10)
is.vector(d)
dice
data()
head(infert)
education
infert$education
search()
library("maps")
dir()
dir()[5]
dir(recursive=T)
length <- rnorm(10, 180, 10)
weight <- (length/100)^2 * 25
measurements <- data.frame(cbind(length, weight))
round(measurements,4)
round(measurements)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(predictors)
str(diagnosis)
dim(diagnosis)
length(diagnosis)
names(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
dim(training)
dim(testing)
str(training)
taining$CompressiveStrength
training$CompressiveStrength
library(Himc)
library(Hmisc)
cutStrength<-cut2(training$CompressiveStrength,g=10)
cutStrenght
cutStrength
qplot(cutStrength,FlyAsh,data=training, fill=cutStrength, geom=c("boxplot"))
hist(cutStrength)
row.names(training)
qplot(cutStrength,row.names,data=training, fill=cutStrength, geom=c("boxplot"))
plot(cutStrenght,row.names(training))
plot(cutStrength,row.names(training))
plot(row.names(training),cutStrength)
plot(cutStrength, 1:774)
hist(training$SuperPlasticizer)
str(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
6*0.51^2*0.49
6*0.51^2*0.49/2
3/6.5
mean=16*2.8
mean
sigma=sqrt(16*2.8*0.72)
sigma
2/9
pnorm(0.22)
pnorma(2.5/9)
pnorm(2.5/9)
pnorm(1.5/9)
?pbinom
pbinom(c(91,92),100,.9)
?pois
?poiss
?ppois
ppois(35,30)
ppois(35,30,lower.tail=FALSE)
ppois(36,30,lower.tail=FALSE)
ppois(36,30,lower.tail=FALSE)-ppois(35,30,lower.tail=FALSE)
qnorm?
/
?qnorm
qnorm(0.1,21,5)
100*0.95*0.05
25*.45*.55
150*0.05*0.95
sqrt(10)
x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
x<-seq(-4,4,0.01)
x
plot(x,dnorm(x),type="l")
plot(x,dnorm(x))
plot(x,pnorm(x))
qnorm(0.25)
qnorm(c(0.025, 0.975))
round(qnorm(c(0.025, 0.975)),2)
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="blood pressure")
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="one tailed test")
pnorm(72, 90, 10) # probability of randomly selecting a subject bt 72 or lower
abline(v=72) # Draw a line for 72 . v is the x-value for a vertical line
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
text(70, 0.005, "blue area = p = 0.0359")
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
?plot
plot(bt, dnorm(bt, 90, 10), type="l", main="two-tailed test")
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
pnorm(72, 90, 10)
abline(v=72)
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
cord.x1 <- c(108,seq(108,120,1),120)
cord.y1 <- c(0,dnorm(seq(108, 120, 1), 90, 10),0)
polygon(cord.x1,cord.y1,col='skyblue')
text(65, 0.005, round(pnorm(72, 90, 10), 3))
text(115, 0.005, round(pnorm(72, 90, 10), 3))
text(75, 0.02,  " p = 0.072 "  )
x <- seq(-4,4,0.05); plot (dnorm(x))
curve(dnorm(x), from= -4, to=4)
x <- seq(-4,4,0.05); plot (dnorm(x), type="l")
pnorm(100,90,10)
?seq
seq(0,1,length.out=11)
seq(100)
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2=dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
abline(v=qnorm(0.95,80,10))
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2=dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
abline(v=qnorm(0.025,80,10))
abline(v=qnorm(0.975,80,10))
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2=dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
cord.x1 <- c((round(qnorm(0.975, 80, 10))),seq((round(qnorm(0.975, 80, 10))), 120,1),120)
cord.y1 <- c(0,dnorm(seq((round(qnorm(0.975, 80, 10))), 120, 1), 80, 10),0)
polygon(cord.x1,cord.y1,col='red')
cord.x2 <- c(50,seq(50,round(qnorm(0.025, 80, 10),1)),round(qnorm(0.025, 80, 10)))
cord.y2 <- c(0,dnorm(seq(50,round(qnorm(0.025, 80, 10),1)), 80, 10),0)
polygon(cord.x2,cord.y2,col='red')
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2=dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
cord.x2<- c(0,seq((round(1-qnorm(0.025,110,10))),100,1),100)
cord.y2 <- c(0,dnorm(seq((round(1-qnorm(0.025, 110, 10))), 100, 1), 110, 10),0)
polygon(cord.x2,cord.y2,col='red')
abline(v=round(qnorm(0.975, 80, 10, lower.tail=T)))
abline(v=round(qnorm(0.025, 80, 10, lower.tail=T)))
text(95,0.005, "? ",xpd=5)
x<- seq(50,140,length=200)
y1<- dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2<- dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
cord.x2<- c(0,seq((round(1-qnorm(0.025,110,10))),100,1),100)
cord.y2 <- c(0,dnorm(seq((round(1-qnorm(0.025, 110, 10))), 100, 1), 110, 10),0)
polygon(cord.x2,cord.y2,col='red')
abline(v=round(qnorm(0.975, 80, 10, lower.tail=T)))
abline(v=round(qnorm(0.025, 80, 10, lower.tail=T)))
cord.x1 <- c(100,seq(round(qnorm(0.975, 80, 10, lower.tail=T)), 140,1),140)
cord.y1 <- c(0,dnorm(seq(round(qnorm(0.975, 80, 10, lower.tail=T)),140, 1), 110, 10),0)
polygon(cord.x1,cord.y1,col='6')
text(95,0.005, "? ",xpd=5)
text(115,0.005, "1-? ",xpd=5)
library(SDSFoundations)
install.packages("SDSFoundations")
99/8
99/(8*200)
29.8/(4*196)
source('~/gitwork/github/rprog/Data_clean.R')
pwd
getwd()
source('~/gitwork/github/rprog/Data_clean.R')
x<-seq(-4, 4, 0.01)
plot(x, dnorm(x), type="l")
plot(x, dnorm(x))
plot(x, pnorm(x))
qnorm(0.25)
qnorm(c(0.025, 0.975))
data <- read.table("clipboard", header = T, sep = '\t')
getwd()
data<-read.csv("/Users/haku/Temp/InstrumentField.csv")
data
table(data$CONTENT)
pricedata<-data[data$TYPE=='PRICE']
pricedata<-data[data$TYPE=='PRICE',]
table(data$INSTTYPE)
summary(data$INSTTYPE)
dim(table(data$INSTTYPE))
View(pricedata)
View(pricedata)
?write.csv
write.csv(pricedate,"/Users/haku/Temp/InstrumentField_price.csv")
write.csv(pricedata,"/Users/haku/Temp/InstrumentField_price.csv")
labeldata<-data[data$TYPE=='LABEL',]
write.csv(labeldata,"/Users/haku/Temp/InstrumentField_lebal.csv")
vardata<-data[data$TYPE=='VAR',]
write.csv(vardata,"/Users/haku/Temp/InstrumentField_var.csv")
dim(table(vardata$CONTENT))
dim(table(pricedata$CONTENT))
table(pricedata$CONTENT)
summary(pricedata$CONTENT)
?summary
View(vardata)
table(pricedata$CONTENT)
aggregate(pricedata$CONTENT)
?aggregate
aggregate(pricedata$CONTENT,FUN=sum)
aggregate(pricedata$CONTENT,by=CONTENT,FUN=sum)
aggregate(pricedata$CONTENT,by='CONTENT',FUN=sum)
aggregate(pricedata$CONTENT,by=c('CONTENT'),FUN=sum)
aggregate(pricedata$CONTENT,by=list(c('CONTENT')),FUN=sum)
aggregate(. ~ CONTENT, data=vardata,sum)
vars<-aggregate(. ~ CONTENT, data=vardata,sum)
labels<-aggregate(. ~ CONTENT, data=labeldata,sum)
labels<-aggregate(. ~ CONTENT, data=labeldata,FUN=sum)
labels<-aggregate(. ~ CONTENT, data=labeldata)
?summarize
?summary
summary(vardata$CONTENT)
labels<-aggregate(. ~ CONTENT, data=labeldata,sum)
write.csv(vars,"/Users/haku/Temp/vars.csv")
write.csv(labels,"/Users/haku/Temp/labels.csv")
summary(vardata$CONTENT)
x=seq(-4,4,0.01)
plot(x,dnorm(x),type="l")
plot(x,dnorm(x),type="l")
x=seq(-40,40,0.01)
plot(x,dnorm(x),type="l")
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
pnorm(72, 90, 10)
abline(v=72)
x=seq(-40,40,0.01)
plot(x,dbinorm(x),type="l")
?dnorm
plot(x,dbinom(x),type="l")
k=seq(0,2000,by=20)
plot(k,dbinom(k,2000,pi/10,log=TRUE),type="l")
plot(k,dbinom(k,2000,0.5),type="l")
n=100
p=0.6
k=seq(0,100,1)
plot(k,dbinom(k,n,p),type="l")
2*exp(-2*0.09*10)
log(0.05/200)
log(0.05/200)/0.02
library(SDSFoundations)
install.packages('SDSFoundations')
6^2+2
x<-6^2+2
x^2
WorldBankData <- read.csv("~/kuaipan/\xFB\x68/Courses/Edx_DAF/WorldBankData.csv")
View(WorldBankData)
BikeData <- read.csv("~/gitwork/github/work/BikeData.csv")
View(BikeData)
str(BikeData)
BikeData[7,c('age')]
head(BikeData)
ten<-BikeData[1:10]
ten<-BikeData[1:10,]
ten<-BikeData[1:10,c('cyc_freq')]
ten
?contour
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
par(op)
x <- -6:16
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
example(data.table)
library(data.table)
help("data.table")
example(data.table)
source('~/kuaipan/Kuaipan/Courses/StatsLearning/ch4.R', echo=TRUE)
x=c(2,7,5)
x
y=seq(from=4,length=3,by=3)
?seq
y
library(UsingR)
?father.son
data(father.son)
summary(father.son)
sd->father.son[round(father.son$fheight)==71]
sd<-father.son[round(father.son$fheight)==71]
sd<-father.son
sd$nf<-round(fheight)
sd$nf<-round(sd$fheight)
sd1<-sd[nf==71]
sd1<-sd[sd$nf==71]
sd1<-sd[sd$nf==71,]
mean(sd1$sheight)
rnorm(10)
X<-matrix(1:1000,100,10)
X[25,3]
x=1:10
X=cbind(x,2*x,3*x,4*x,5*x)
sum(X[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
matrix(1,3)
X=matrix(c(3,4,-5,1,2,2,2,-1,1,-1,5,-5,5,0,0,1),4,4,byrow=TRUE)
X
y=t(c(10,5,7,4))
y
y=t(y)
y
solve(X)
solve(X)%*%y
a <- matrix(1:12, nrow=4)
a
b <- matrix(1:15, nrow=3)
b
a %*% b [3,2]
c<-a %*% b
c[3,2]
a[3,]*.b[,2]
a[3,] *. b[,2]
(a[3,]) *. (b[,2])
(a[3,]) * (b[,2])
a[3,]
b[,2]
sum(a[3,]*b[,2])
rownames(X) <- c("a","a","b","b")
X <- matrix(c(1,1,1,1,0,0,1,1),nrow=4)
rownames(X) <- c("a","a","b","b")
X
beta <- c(5, 2)
Y<-X %*% beta
Y
X <- matrix(c(1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1),nrow=6)
rownames(X) <- c("a","a","b","b","c","c")
beta <- c(10,3,-3)
X %*% beta
set.seed(1)
g <- 9.8 ## meters per second
n <- 25
tt <- seq(0,3.4,len=n) ##time in secs, t is a base function
d <- 56.67  - 0.5*g*tt^2 + rnorm(n,sd=1)
plot(tt,d,ylab="Distance in meters",xlab="Time in seconds")
g = 9.8 ## meters per second
h0 = 56.67
v0 = 0
n = 25
tt = seq(0,3.4,len=n) ##time in secs, t is a base function
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
A
set.seed(1)
B <- 10000
set.seed(1)
B <- 100000
betahat<-replicate(B,{
y <- h0 + v0*tt  - 0.5*g*tt^2 + rnorm(n,sd=1)
betahats <- A%*%y
return(-2*betahats[3])
})
head(betahat)
sd(betahat)
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
betahat
N <- 50
B <-1000
betahat <- replicate(B,{
index <- sample(n,N)
sampledat <- father.son[index,]
x <- sampledat$fheight
y <- sampledat$sheight
lm(y~x)$coef
})
betahat <- t(betahat) ## have estimates in two columns
N <- 50
B <-10000
betahat <- replicate(B,{
index <- sample(n,N)
sampledat <- father.son[index,]
x <- sampledat$fheight
y <- sampledat$sheight
lm(y~x)$coef
})
betahat <- t(betahat) ## have estimates in two columns
sd(betahat)
betahat
sd(betahat[,2])
mean( (betahat[,1]-mean(betahat[,1] ))* (betahat[,2]-mean(betahat[,2])))
mean( (y - mean(y))*(x-mean(x) ) )
install.packages("FRAPO")
sd(c(5,8,12))
which.min(c(4,1,6))
rbind(c(1,2,3),c(4,5,6))
install.packages("rpart.plot")
cat("tset")
library(ggplot2)
summary(mpg)
ggplot(data=mpg,aes(x=cty,y=hwy)) +
geom_point(aes(color=cyl)) +
geom_smooth(method="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
qplot(x=cty,y=hwy,color=cyl,data=mpg,geom = "point")
last_plot()
#one variable
a<- ggplot(mpg,aes(hwy))
a + geom_area(stat="bin")
b <- ggplot(mpg,aes(fl))
b + geom_bar()
setwd("~/gitwork/github/brian-bai.github.io")
